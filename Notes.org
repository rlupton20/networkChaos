* Dummy Network Interfaces
** To create a dummy interface:

sudo modprobe dummy
sudo ip link add rvl0 type dummy
sudo ifconfig rvl0 up

route add -net 10.0.0.0 netmask 255.255.255.0 dev rvl0

** To take the dummy interface down:

route delete -net 10.0.0.0 netmask 255.255.255.0 dev rvl0

sudo ifconfig rvl0 down
sudo ip link delete rvl0 type dummy
sudo rmmod dummy
* Sockets
** Raw Sockets
IPPROTO_RAW is protocol number 255.
* Running list of requirements
** libpcap development library
Operating System's package manager
** pcap
cabal install pcap
** dummy kernal module
Should be preinstalled
** network-house package
cabal-install network-house
* Notes and resources
http://www.pocketnix.org/posts/Linux%20Networking:%20Dummy%20Interfaces%20and%20Virtual%20Bridges
http://unix.stackexchange.com/questions/152331/how-can-i-create-a-virtual-ethernet-interface-on-a-machine-without-a-physical-ad
** Parsing packets with the Haskell house library
http://osdir.com/ml/lang.haskell.libraries/2006-05/msg00076.html
** List of useable IP addresses for LAN
http://www.arrowmail.co.uk/articles/iprange.aspx
* Generating SSL (TSL) keys and certificates
From the command line, the following is a good starting point
openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 30


* TLS sockets
To get TLS working: use contextNew backend params randomNumGen
params : Client params and Server params
serverParams = ServerParams ...
https://hackage.haskell.org/package/tls-1.2.2/docs/Network-TLS.html#g:6
Socket is an instance of HasBackend, so contextNew can be passed a socket.
ClientParams is an instance of TLSParams, as is ServerParams (missing from documentation, but ghci confirms).
** ServerParams
ServerParams = ServerParams {
serverWantClientCert :: Bool,
serverCACertificates :: [SignedCertificate],
serverDHEParams :: Maybe DHParams,
serverShared :: Shared,
serverHooks :: ServerHooks,
serverSupported :: Supported }

Can get defaults by using def from Data.Default.Class
** ClientParams
** Reading certificates
The old Network.TLS.Extra provides:
fileReadCertificate :: FilePath -> IO X509
fileReadPrivateKey :: FilePath -> IO PrivateKey
This is replaced by:
credentialLoadX509 :: FilePath -> FilePath -> IO (Either String Credential)
Note passphrases make this fail, remove passphrases with
openssl rsa -in keyIn.pem -out keyNoPassphrase.pem
or see
http://serverfault.com/questions/366372/is-it-possible-to-generate-rsa-key-without-pass-phrase
The option -nodes (No DES) will stop the key being encrypted.

Then credentialLoadX509 "cert.pem" "key.pem" loads the certificate.

Since on the fly (non-interactive) generation is also desirable, one can do this.
E.g.
http://crohr.me/journal/2014/generate-self-signed-ssl-certificate-without-prompt-noninteractive-mode.html
http://unix.stackexchange.com/questions/104171/create-ssl-certificate-non-interactively
* Datagram TLS
DTLS is for unreliable transport protocols. May be useful for tunneling UDP etc.
